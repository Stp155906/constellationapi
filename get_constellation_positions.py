# -*- coding: utf-8 -*-
"""get_constellation_positions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T9-5eBrLKRTGzTOsUDj0ezheKsrQn8_8
"""

!pip install skyfield

from skyfield.api import load, Topos, Star
from skyfield.data import hipparcos
from datetime import datetime
import json

import json
from datetime import datetime, timedelta
from skyfield.api import load, Topos, Star, load_constellation_map

# Define a few key stars in selected constellations
# (These are examples; you can choose your own set of stars)
key_stars = {
    'Sirius': (6.7525694, -16.7161085),  # RA, Dec for Sirius in Canis Major
    'Betelgeuse': (5.9195293, 7.407064),  # RA, Dec for Betelgeuse in Orion
    'Rigel': (5.242298, -8.201639),  # RA, Dec for Rigel in Orion
    'Polaris': (2.530301, 89.26411),  # RA, Dec for Polaris in Ursa Minor
    'Vega': (18.615647, 38.78369)  # RA, Dec for Vega in Lyra
}

def get_star_positions(latitude, longitude, date_time):
    planets = load('de421.bsp')
    earth = planets['earth']

    observer = earth + Topos(latitude_degrees=latitude, longitude_degrees=longitude)
    ts = load.timescale()
    t = ts.utc(date_time.year, date_time.month, date_time.day, date_time.hour)

    star_positions = []
    for star_name, (ra, dec) in key_stars.items():
        star = Star(ra_hours=ra, dec_degrees=dec)
        astrometric = observer.at(t).observe(star)
        apparent = astrometric.apparent()
        alt, az, distance = apparent.altaz()
        if alt.degrees > 60:  # Only consider stars overhead
            star_data = {
                'star_name': star_name,
                'altitude_degrees': alt.degrees,
                'azimuth_degrees': az.degrees,
                'distance_au': distance.au
            }
            star_positions.append(star_data)

    return star_positions

def generate_hourly_star_data(region, latitude, longitude):
    start_time = datetime.utcnow().replace(minute=0, second=0, microsecond=0)
    star_data_by_hour = {}
    for hour in range(24):
        current_time = start_time + timedelta(hours=hour)
        star_positions = get_star_positions(latitude, longitude, current_time)
        star_data_by_hour[current_time.isoformat()] = star_positions

    return {
        'region': region,
        'latitude': latitude,
        'longitude': longitude,
        'star_data_by_hour': star_data_by_hour
    }

regions = {
    "north_america": (40.7128, -74.0060),  # Example coordinates for New York City
    "europe": (48.8566, 2.3522),           # Example coordinates for Paris
    "asia": (35.6895, 139.6917),           # Example coordinates for Tokyo
    "australia": (-33.8688, 151.2093),     # Example coordinates for Sydney
    "africa": (-1.2921, 36.8219),          # Example coordinates for Nairobi
    "south_america": (-23.5505, -46.6333)  # Example coordinates for SÃ£o Paulo
}

all_star_data = {}
for region, (lat, lon) in regions.items():
    region_star_data = generate_hourly_star_data(region, lat, lon)
    all_star_data[region] = region_star_data

with open('star_data.json', 'w') as f:
    json.dump(all_star_data, f, indent=2)